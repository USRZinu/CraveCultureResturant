// <auto-generated />
using System;
using CraveCultureResturant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CraveCultureResturant.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250509103100_initialized")]
    partial class initialized
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CraveCultureResturant.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Appetizer"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Entree"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Side Dish"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Dessert"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Beverage"
                        });
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Chicken"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Beef"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Fish"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Vegetable"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Rice"
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Pasta"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Salad"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Sauce"
                        });
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Prouducts");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            Description = "Crispy rolls filled with vegetables",
                            Name = "Spring Rolls",
                            Price = 70.00m,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Spicy chicken curry with rice",
                            Name = "Chicken Curry",
                            Price = 150.00m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Description = "Tender beef stir fry with vegetables",
                            Name = "Beef Stir Fry",
                            Price = 250.00m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3,
                            Description = "Fried rice with mixed vegetables",
                            Name = "Vegetable Fried Rice",
                            Price = 165.00m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 4,
                            Description = "Rich chocolate cake with frosting",
                            Name = "Chocolate Cake",
                            Price = 100.00m,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Description = "Fresh salad with Caesar dressing",
                            Name = "Caesar Salad",
                            Price = 170.00m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Description = "Grilled salmon with lemon butter sauce",
                            Name = "Grilled Salmon",
                            Price = 315.00m,
                            Stock = 10
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 5,
                            Description = "Sweet mango yogurt drink",
                            Name = "Mango Lassi",
                            Price = 150.00m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Description = "Pasta with mixed vegetables",
                            Name = "Pasta Primavera",
                            Price = 200.00m,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4,
                            Description = "Italian coffee-flavored dessert",
                            Name = "Tiramisu",
                            Price = 265.00m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1,
                            Description = "Spicy vegetable-filled pastry",
                            Name = "Vegetable Samosa",
                            Price = 10.00m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2,
                            Description = "Grilled chicken in creamy tomato sauce",
                            Name = "Chicken Tikka Masala",
                            Price = 245.00m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Description = "Soft Indian bread with garlic",
                            Name = "Garlic Naan",
                            Price = 80.00m,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            Description = "Creamy cheesecake with graham cracker crust",
                            Name = "Cheesecake",
                            Price = 190.00m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5,
                            Description = "Refreshing iced tea with lemon",
                            Name = "Iced Tea",
                            Price = 45.00m,
                            Stock = 70
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 2,
                            Description = "Mixed vegetables stir-fried with soy sauce",
                            Name = "Vegetable Stir Fry",
                            Price = 160.00m,
                            Stock = 45
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 3,
                            Description = "Fresh seasonal fruit salad",
                            Name = "Fruit Salad",
                            Price = 120.00m,
                            Stock = 55
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4,
                            Description = "Light and airy chocolate dessert",
                            Name = "Chocolate Mousse",
                            Price = 95.00m,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("CraveCultureResturant.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 10,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 15,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 17,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 18,
                            IngredientId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Order", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.OrderItem", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraveCultureResturant.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Product", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.ProductIngredient", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraveCultureResturant.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraveCultureResturant.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CraveCultureResturant.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CraveCultureResturant.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CraveCultureResturant.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
